{"files":[{"path":"src/cli.rs","content":"// --- src/cli.rs ---\nuse clap::Parser;\nuse std::path::PathBuf;\n\n#[derive(Parser, Debug, Clone)]\n#[command(\n    author,\n    version,\n    about = \"Generate structured project context for AI models\",\n    long_about = \"Scans project files, gathers context (metadata, system info, structure, code, docs, rules), \\\\nand outputs it in formats like JSON, YAML, or XML, suitable for AI processing. Respects .gitignore and provides soft ignores.\",\n    help_template = \"{about-section}\\\\nUsage: {usage}\\\\n\\\\n{all-args}{after-help}\"\n)]\npub struct Cli {\n    #[command(next_help_heading = \"Configuration & Project Setup\")]\n    #[clap(flatten)]\n    pub config_project: ConfigProjectGroup,\n\n    #[command(next_help_heading = \"Configuration Utilities\")]\n    #[clap(flatten)]\n    pub config_utils: ConfigUtilsGroup,\n\n    #[command(next_help_heading = \"Output Control\")]\n    #[clap(flatten)]\n    pub output_control: OutputControlGroup,\n\n    #[command(next_help_heading = \"Chunking\")]\n    #[clap(flatten)]\n    pub chunking: ChunkingGroup,\n\n    #[command(next_help_heading = \"Watch Mode\")]\n    #[clap(flatten)]\n    pub watch: WatchGroup,\n\n    #[command(next_help_heading = \"Quick Content Mode\")]\n    #[clap(flatten)]\n    pub quick: QuickGroup,\n\n    #[command(next_help_heading = \"Utility Modes (Show)\")]\n    #[clap(flatten)]\n    pub show_utils: ShowUtilsGroup,\n\n    #[command(next_help_heading = \"Utility Modes (Info)\")]\n    #[clap(flatten)]\n    pub info_utils: InfoUtilsGroup,\n\n    #[command(next_help_heading = \"Completions Utilities\")]\n    #[clap(flatten)]\n    pub completions_utils: CompletionsUtilsGroup,\n\n    #[command(next_help_heading = \"Core Context Exclusion\")]\n    #[clap(flatten)]\n    pub exclusion: ExclusionGroup,\n\n    #[command(next_help_heading = \"Section Toggles\")]\n    #[clap(flatten)]\n    pub section_toggles: SectionTogglesGroup,\n\n    #[command(next_help_heading = \"Ignore Toggles\")]\n    #[clap(flatten)]\n    pub ignore_toggles: IgnoreTogglesGroup,\n\n    #[command(next_help_heading = \"Content Filtering\")]\n    #[clap(flatten)]\n    pub filters: FilterGroup,\n\n    #[command(next_help_heading = \"Metadata Override\")]\n    #[clap(flatten)]\n    pub meta_override: MetaOverrideGroup,\n\n    #[command(next_help_heading = \"Other Utilities\")]\n    #[clap(flatten)]\n    pub other_utils: OtherUtilsGroup,\n}\n\n#[derive(Parser, Debug, Clone)]\n#[group(id = \"config_project\")]\npub struct ConfigProjectGroup {\n    #[arg(\n        long,\n        value_name = \"CONTEXT_FILE\",\n        help = \"Specify path to the TOML config file.\",\n        long_help = \"Specify the path to the TOML configuration file. Overrides default search (~/.xtools/xcontext/xcontext.toml relative to project root). See docs for path resolution details.\",\n        conflicts_with = \"disable_context_file\"\n    )]\n    pub context_file: Option<String>,\n\n    #[arg(\n        long,\n        help = \"Disable loading any TOML config file (use defaults + CLI args only).\",\n        conflicts_with = \"context_file\"\n    )]\n    pub disable_context_file: bool,\n\n    #[arg(\n        long,\n        value_name = \"PATH\",\n        help = \"Specify the target project directory.\",\n        long_help = \"Specify the target project directory. All operations are relative to this path. Determined via CLI -> $PROJECT_ROOT -> CWD.\"\n    )]\n    pub project_root: Option<PathBuf>,\n\n    #[arg(\n        long,\n        value_name = \"NAME\",\n        help = \"Specify the project name.\",\n        long_help = \"Specify the project name. Overrides name from config file or default (project directory name).\"\n    )]\n    pub project_name: Option<String>,\n}\n\n#[derive(Parser, Debug, Clone)]\n#[group(id = \"config_utils\", conflicts_with_all = [\"completions_utils\", \"watch\", \"quick\", \"show_utils\", \"info_utils\", \"other_utils\"])]\npub struct ConfigUtilsGroup {\n    #[arg(\n        long,\n        help = \"Display the default configuration structure (including project name) as TOML and exit.\",\n        long_help = \"Displays the default configuration structure (like the example in SPEC.org, but including the determined project name and default meta) as TOML to stdout, then exits. Does not show merged/effective config.\"\n    )]\n    pub config_show: bool,\n\n    #[arg(\n        long,\n        help = \"Save the default configuration structure (including project name) to the default file path and exit.\",\n        long_help = \"Saves the default configuration structure (including determined project name and default meta) to the default path (~/.xtools/xcontext/xcontext.toml relative to project root). Prompts for overwrite if the file exists. Does not save merged/effective config.\"\n    )]\n    pub config_save: bool,\n}\n\n#[derive(Parser, Debug, Clone)]\n#[group(id = \"output_control\")]\npub struct OutputControlGroup {\n    #[arg(\n        long,\n        help = \"Force output of the main context to standard output.\",\n        long_help = \"Ensures the final generated context is printed to stdout. This is the default if --save or --chunks are not used. Conflicts with --chunks.\",\n        conflicts_with = \"chunking_group\"\n    )]\n    pub stdout: bool,\n\n    #[arg(\n        short = 's',\n        long,\n        value_name = \"SAVE_DIR\",\n        help = \"Save generated context (and chunks) to a specified directory.\",\n        long_help = \"Enables saving mode. Files are saved inside <SAVE_DIR>. Overrides stdout default and config save directory. Creates directory if needed. Overwrites existing files without prompt.\"\n    )]\n    pub save: Option<PathBuf>,\n\n    #[arg(\n        short = 'f',\n        long,\n        value_name = \"FORMAT\",\n        value_parser = [\"json\", \"yaml\", \"xml\"],\n        help = \"Set the output format for the main context.\",\n        long_help = \"Set the output format. Determines serialization and default save extension. [default: json]\"\n    )]\n    pub format: Option<String>,\n\n    #[arg(\n        long,\n        help = \"Ensure JSON output is compact (minified).\",\n        long_help = \"Ensures JSON output is compact (no extra whitespace). Ignored if format is not JSON. [default for JSON]\",\n        conflicts_with = \"disable_json_minify\"\n    )]\n    pub enable_json_minify: bool,\n\n    #[arg(\n        long,\n        help = \"Ensure JSON output is pretty-printed (readable).\",\n        long_help = \"Ensures JSON output is pretty-printed with indentation. Ignored if format is not JSON.\",\n        conflicts_with = \"enable_json_minify\"\n    )]\n    pub disable_json_minify: bool,\n}\n\n#[derive(Parser, Debug, Clone)]\n#[group(id = \"chunking_group\")]\npub struct ChunkingGroup {\n    #[arg(\n        short = 'c',\n        long,\n        value_name = \"SIZE_STRING\",\n        help = \"Split source content into chunks (e.g., \\\"5MB\\\", \\\"512kb\\\").\",\n        long_help = \"Enables chunking. Splits source files into multiple JSON files, keeping each below <SIZE_STRING> (requires 'kb' or 'mb' suffix). Implicitly enables saving. Requires --format json. Conflicts with --stdout.\",\n        conflicts_with = \"stdout\"\n    )]\n    pub chunks: Option<String>,\n}\n\n// --- Updated WatchGroup ---\n#[derive(Parser, Debug, Clone)]\n#[group(id = \"watch\", conflicts_with_all = [\n    \"completions_utils\",\n    \"config_utils\",\n    \"quick\",\n    \"show_utils\",\n    \"info_utils\"\n    // REMOVED \"other_utils\" from conflict list\n])]\npub struct WatchGroup {\n    #[arg(\n        short = 'w',\n        long,\n        help = \"Watch for changes and re-generate context automatically.\",\n        long_help = \"Runs an initial generation, then monitors included source files, docs files, and the config file for changes. Re-generates context on change after a debounce delay. Runs until interrupted (Ctrl+C).\"\n    )]\n    pub watch: bool,\n\n    #[arg(\n        long,\n        value_name = \"DELAY_STRING\",\n        help = \"Set debounce delay for watch mode (e.g., \\\"500ms\\\", \\\"1s\\\").\",\n        long_help = \"Specifies the time to wait after detecting a file change before triggering regeneration in --watch mode. Overrides config file setting. [default: 300ms]\"\n    )]\n    pub watch_delay: Option<String>,\n}\n// --- End Updated WatchGroup ---\n\n\n#[derive(Parser, Debug, Clone)]\n#[group(id = \"quick\", conflicts_with_all = [\"completions_utils\", \"config_utils\", \"watch\", \"show_utils\", \"info_utils\", \"other_utils\"])]\npub struct QuickGroup {\n    #[arg(\n        short = 'q',\n        long,\n        value_name = \"PATTERN\",\n        help = \"Quickly extract content of files matching PATTERN (glob) and exit.\",\n        long_help = \"Finds files matching PATTERN within project root (respects .gitignore and soft ignores by default), reads them, and outputs a simple structure {path: content} to stdout using the specified --format. Bypasses full context generation. Useful for piping content.\"\n    )]\n    pub quick: Option<String>,\n}\n\n#[derive(Parser, Debug, Clone)]\n#[group(id = \"show_utils\", conflicts_with_all = [\"completions_utils\", \"config_utils\", \"watch\", \"quick\", \"info_utils\", \"other_utils\"])]\npub struct ShowUtilsGroup {\n    #[arg(\n        long,\n        value_name = \"KEY\",\n        help = \"Display specific [meta] key's value, or list keys if none given.\",\n        long_help = \"Display the final value for a specific key from the merged [meta] section (config + --add-meta overrides). If no KEY is provided, lists available keys. Exits after printing.\",\n        num_args = 0..=1,\n        conflicts_with = \"show_meta_all\"\n    )]\n    pub show_meta: Option<Option<String>>,\n\n\n    #[arg(\n        long,\n        help = \"Display all metadata key-value pairs and exit.\",\n        long_help = \"Display all key-value pairs from the merged [meta] section (config + --add-meta overrides). Exits after printing.\"\n    )]\n    pub show_meta_all: bool,\n\n    #[arg(\n        long,\n        value_name = \"PROMPT_NAME\",\n        help = \"Display specific prompt's text, or list names if none given.\",\n        long_help = \"Display the text of a specific prompt (built-in or from config [prompts] section) by its name. If no NAME is provided, lists available prompt names. Exits after printing.\",\n        num_args = 0..=1,\n        conflicts_with = \"show_prompts\"\n    )]\n    pub show_prompt: Option<Option<String>>,\n\n    #[arg(\n        long,\n        help = \"Display all available prompt names and their text, then exit.\",\n        long_help = \"Displays all available prompts (built-in merged with config [prompts]) with their names and full text content. Exits after printing.\"\n    )]\n    pub show_prompts: bool,\n\n    #[arg(\n        long,\n        value_name = \"RULE_NAME\",\n        help = \"Display specific static ruleset's text, or list names if none given.\",\n        long_help = \"Display the text content of a specific *static* (built-in) ruleset by its name (e.g., rust_coding). If no NAME is provided, lists available static names. Exits after printing.\",\n        num_args = 0..=1,\n        conflicts_with = \"show_rules\"\n    )]\n    pub show_rule: Option<Option<String>>,\n\n    #[arg(\n        long,\n        help = \"Display available rules (static names/content, custom names/content), then exit.\",\n        long_help = \"Displays the names and full content of all available *static* rulesets and *custom rule lists* defined in the config [rules] section. Exits after printing.\"\n    )]\n    pub show_rules: bool,\n}\n\n#[derive(Parser, Debug, Clone)]\n#[group(id = \"info_utils\", conflicts_with_all = [\"completions_utils\", \"config_utils\", \"watch\", \"quick\", \"show_utils\", \"other_utils\"])]\npub struct InfoUtilsGroup {\n    #[arg(\n        long,\n        help = \"Display project statistics (files, lines, bytes, tokens) and exit.\",\n        long_help = \"Calculates and displays statistics (total counts and per-file details with human-readable sizes) for the files that *would* be included in the context (source + docs). Outputs as JSON to stdout, then exits.\"\n    )]\n    pub metrics: bool,\n\n    #[arg(\n        long,\n        help = \"Show effective config and planned file inclusions for debugging, then exit.\",\n        long_help = \"Displays the final effective configuration object and the lists of relative paths for tree, source, and docs files that would be included based on that config. Outputs as JSON to stdout, then exits.\"\n    )]\n    pub debug: bool,\n}\n\n#[derive(Parser, Debug, Clone)]\n#[group(id = \"completions_utils\", conflicts_with_all = [\"config_utils\", \"watch\", \"quick\", \"show_utils\", \"info_utils\", \"other_utils\"])]\npub struct CompletionsUtilsGroup {\n    #[arg(\n        long,\n        help = \"Generate Fish shell completions and print to stdout.\",\n        long_help = \"Generates the Fish shell completion script for xcontext and prints it to standard output.\",\n        conflicts_with = \"completions_fish_save\"\n    )]\n    pub completions_fish_show: bool,\n\n    #[arg(\n        long,\n        help = \"Generate and save Fish shell completions to the default directory.\",\n        long_help = \"Generates the Fish shell completion script and saves it to ~/.config/fish/completions/xcontext.fish, overwriting if it exists.\",\n        conflicts_with = \"completions_fish_show\"\n    )]\n    pub completions_fish_save: bool,\n}\n\n#[derive(Parser, Debug, Clone)]\n#[group(id = \"exclusion\")]\npub struct ExclusionGroup {\n    #[arg(\n        long,\n        help = \"Omit the 'project_name' field from the output context.\",\n        long_help = \"Prevents the 'project_name' field from appearing in the final output context. Overrides config [output].include-project-name = true.\"\n    )]\n    pub exclude_project_name: bool,\n\n    #[arg(\n        long,\n        help = \"Omit the 'project_root' field from the output context.\",\n        long_help = \"Prevents the 'project_root' field from appearing in the final output context. Overrides config [output].include-project-root = true.\"\n    )]\n    pub exclude_project_root: bool,\n\n    #[arg(\n        long,\n        help = \"Omit the 'generation_timestamp' field from the output context.\",\n        long_help = \"Prevents the 'generation_timestamp' field from appearing in the final output context. Overrides config [output].include-timestamp = true.\"\n    )]\n    pub exclude_timestamp: bool,\n\n    #[arg(\n        long,\n        help = \"Omit the 'system_info' field from the output context.\",\n        long_help = \"Prevents the 'system_info' section from appearing. Skips internal system info gathering. Overrides config [output].include-system-info = true.\"\n    )]\n    pub exclude_system_info: bool,\n}\n\n#[derive(Parser, Debug, Clone)]\n#[group(id = \"section_toggles\")]\npub struct SectionTogglesGroup {\n    #[arg(\n        long,\n        help = \"Enable the 'tree' section (directory structure). [default]\",\n        overrides_with = \"disable_tree\"\n    )]\n    pub enable_tree: bool,\n    #[arg(\n        long,\n        help = \"Disable the 'tree' section.\",\n        overrides_with = \"enable_tree\"\n    )]\n    pub disable_tree: bool,\n\n    #[arg(\n        long,\n        help = \"Enable the 'source' section (files/chunks). [default]\",\n        overrides_with = \"disable_source\"\n    )]\n    pub enable_source: bool,\n    #[arg(\n        long,\n        help = \"Disable the 'source' section.\",\n        overrides_with = \"enable_source\"\n    )]\n    pub disable_source: bool,\n\n    #[arg(\n        long,\n        help = \"Enable the 'meta' section (additional metadata). [default]\",\n        overrides_with = \"disable_meta\"\n    )]\n    pub enable_meta: bool,\n    #[arg(\n        long,\n        help = \"Disable the 'meta' section.\",\n        overrides_with = \"enable_meta\"\n    )]\n    pub disable_meta: bool,\n\n    #[arg(\n        long,\n        help = \"Enable the 'rules' section. [default]\",\n        overrides_with = \"disable_rules\"\n    )]\n    pub enable_rules: bool,\n    #[arg(\n        long,\n        help = \"Disable the 'rules' section.\",\n        overrides_with = \"enable_rules\"\n    )]\n    pub disable_rules: bool,\n\n    #[arg(\n        long,\n        help = \"Enable the 'docs' section. [default if includes exist]\",\n        overrides_with = \"disable_docs\"\n    )]\n    pub enable_docs: bool,\n    #[arg(\n        long,\n        help = \"Disable the 'docs' section.\",\n        overrides_with = \"enable_docs\"\n    )]\n    pub disable_docs: bool,\n}\n\n#[derive(Parser, Debug, Clone)]\n#[group(id = \"ignore_toggles\")]\npub struct IgnoreTogglesGroup {\n    #[arg(\n        long,\n        help = \"Globally enable respecting .gitignore files. [default]\",\n        long_help = \"Globally enables respecting .gitignore files for filtering in tree, source, and docs sections (unless overridden per-section in config).\",\n        overrides_with = \"disable_gitignore\"\n    )]\n    pub enable_gitignore: bool,\n\n    #[arg(\n        long,\n        help = \"Globally disable respecting .gitignore files.\",\n        long_help = \"Globally disables respecting .gitignore rules. Explicit include/exclude patterns always take precedence.\",\n        overrides_with = \"enable_gitignore\"\n    )]\n    pub disable_gitignore: bool,\n\n    #[arg(\n        long,\n        help = \"Enable default 'soft ignores' for common files/dirs (e.g., *.lock, .gem/, .vscode/). [default]\",\n        long_help = \"Enables ignoring a predefined list of common build artifacts, lock files, and editor/tool directories loaded from data/soft_ignores.yaml. Lower precedence than .gitignore and explicit filters.\", // Updated help\n        overrides_with = \"disable_soft_ignore\"\n    )]\n    pub enable_soft_ignore: bool,\n\n    #[arg(\n        long,\n        help = \"Disable default 'soft ignores'.\",\n        long_help = \"Disables the predefined 'soft ignore' list.\",\n        overrides_with = \"enable_soft_ignore\"\n    )]\n    pub disable_soft_ignore: bool,\n}\n\n#[derive(Parser, Debug, Clone)]\n#[group(id = \"filters\")]\npub struct FilterGroup {\n    #[arg(long = \"tree-include\", value_name = \"PATTERN_OR_PATH\", action = clap::ArgAction::Append, help = \"Add include path/glob pattern for tree generation.\", long_help=\"Add an include filter for the 'tree' section. Can be a file path, folder path (ending with '/'), or glob pattern. Appends to config list.\")]\n    pub tree_include: Vec<String>,\n    #[arg(long = \"tree-exclude\", value_name = \"PATTERN_OR_PATH\", action = clap::ArgAction::Append, help = \"Add exclude path/glob pattern for tree generation.\", long_help=\"Add an exclude filter for the 'tree' section. Takes precedence over includes, gitignore, and soft ignores. Appends to config list.\")]\n    pub tree_exclude: Vec<String>,\n\n    #[arg(long = \"source-include\", value_name = \"PATTERN_OR_PATH\", action = clap::ArgAction::Append, help = \"Add include path/glob pattern for source files.\", long_help=\"Add an include filter for the 'source' section. Appends to config list.\")]\n    pub source_include: Vec<String>,\n    #[arg(long = \"source-exclude\", value_name = \"PATTERN_OR_PATH\", action = clap::ArgAction::Append, help = \"Add exclude path/glob pattern for source files.\", long_help=\"Add an exclude filter for the 'source' section. Takes precedence over includes, gitignore, and soft ignores. Appends to config list.\")]\n    pub source_exclude: Vec<String>,\n\n    #[arg(long = \"docs-include\", value_name = \"PATTERN_OR_PATH\", action = clap::ArgAction::Append, help = \"Add include path/glob pattern for documentation files.\", long_help=\"Add an include filter for the 'docs' section. Files matching here are removed from source. Appends to config list.\")]\n    pub docs_include: Vec<String>,\n    #[arg(long = \"docs-exclude\", value_name = \"PATTERN_OR_PATH\", action = clap::ArgAction::Append, help = \"Add exclude path/glob pattern for documentation files.\", long_help=\"Add an exclude filter for the 'docs' section. Takes precedence over includes, gitignore, and soft ignores. Appends to config list.\")]\n    pub docs_exclude: Vec<String>,\n}\n\n#[derive(Parser, Debug, Clone)]\n#[group(id = \"meta_override\")]\npub struct MetaOverrideGroup {\n    #[arg(long = \"add-meta\", value_name = \"key=value\", value_parser = parse_key_val, action = clap::ArgAction::Append, help = \"Add/override key-value pairs in the 'meta' section.\", long_help=\"Add or override key-value pairs in the 'meta' data (flattened). Use format 'key=value'. Can be used multiple times. Overrides values from config file.\")]\n    pub add_meta: Vec<(String, String)>,\n}\n\n#[derive(Parser, Debug, Clone)]\n#[group(id = \"other_utils\", conflicts_with_all = [\"completions_utils\", \"config_utils\", \"watch\", \"quick\", \"show_utils\", \"info_utils\"])]\npub struct OtherUtilsGroup {\n    #[arg(\n        short = 'v',\n        long = \"version\",\n        action = clap::ArgAction::Version,\n        help = \"Show version information.\"\n    )]\n    pub version_flag: Option<bool>,\n\n    #[arg(\n        long = \"cl\",\n        help = \"Clear the terminal screen and exit.\"\n    )]\n    pub clear_screen: bool,\n}\n\nfn parse_key_val(s: &str) -> Result<(String, String), String> {\n    s.find('=')\n        .map(|idx| {\n            let key = s[..idx].trim().to_string();\n            let value = s[idx + 1..].trim().to_string();\n            if key.is_empty() {\n                Err(\"Metadata key cannot be empty\".to_string())\n            } else {\n                Ok((key, value))\n            }\n        })\n        .ok_or_else(|| \"Invalid KEY=VALUE format for --add-meta\".to_string())?\n}\n"}],"chunk_info":{"current_part":3,"total_parts":10}}