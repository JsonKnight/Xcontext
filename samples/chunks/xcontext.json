{"ai_readme":"AI Readme: This JSON object provides context about a software project. Use this information to understand the project's structure, code, documentation, and guidelines.\n\nKey Sections Explained:\n- 'project_name': Identifies the project.\n- 'project_root': The base directory path.\n- 'system_info': Details about the environment where this context was generated.\n- 'meta': Contains user-defined key-value pairs relevant to the project.\n- 'docs': An array of documentation files. Each object has 'path' (relative to project root) and 'content'.\n- 'tree': Represents the project's directory structure hierarchically. Each node has 'name', 'type' ('file' or 'directory'), and optional 'children'.\n- 'source.chunks': An array of relative paths to chunk files (JSON). Load these files to get the complete source code context. The main context was too large.\n- 'rules': Contains coding standards, guidelines, or instructions. Keys are rule set names (e.g., 'instructions', 'project_rules'). Values are arrays of rule strings (often prefixed with '- '). **Follow these rules strictly.**\n- 'generation_timestamp': Indicates when this context was created (UTC).","project_name":"xcontext","project_root":"/drive/dotfiles/xtools/xcontext","system_info":{"os_name":"Fedora Linux","os_version":"41","kernel_version":"6.13.10-200.fc41.x86_64","hostname":"fedora","shell":"/usr/bin/fish","term":"xterm-256color"},"meta":{"author":"json"},"docs":[{"path":"CLI.org","content":"#+TITLE: xcontext CLI Specification\n#+AUTHOR: json & Gemini\n#+OPTIONS: toc:t\n\n* Introduction / Overview\nThis document details the final agreed-upon Command Line Interface (CLI) for the ~xcontext~ tool, designed collaboratively. It aims for clarity, consistency, and user convenience, incorporating features like configuration management, flexible output (including a dynamic AI Readme), nested source code representation, structured rule output, simplified content filtering, watch mode, documentation handling, quick content extraction, shell completions, and various utility modes.\n\n* Configuration Loading Order\nThe final configuration used by ~xcontext~ is determined by layering settings in the following order of precedence (later steps override earlier ones):\n1.  *Defaults:* Hardcoded default values within the application (uses snake_case internally).\n2.  *TOML File:* Settings loaded from the configuration file (found via default path or ~--context-file~ flag using specified path resolution logic), unless ~--disable-context-file~ is used. Keys within sections should be snake_case (e.g., `use_gitignore`). Values here override Defaults.\n3.  *CLI Flags:* Options provided on the command line. Values here override both TOML File and Defaults settings.\n\n* Determining Project Root & Name\n** Project Root\n   The effective project root directory, used as the base for finding files and configuration, is determined as follows:\n   1. If the ~--project-root <PATH>~ CLI flag is provided, its argument (after tilde expansion) is used.\n   2. If the flag is not provided, the Current Working Directory (CWD) where ~xcontext~ was executed is used.\n   *(Note: Setting the project root path via the TOML file is *not* supported to avoid startup complexities.)*\n\n** Project Name\n   The effective project name, used for identification and default save filenames, is determined as follows:\n   1. If the ~--project-name <NAME>~ CLI flag is provided, its argument is used.\n   2. If not provided via CLI, the value of `project_name` in the TOML file's `[general]` section is checked. If present, it is used.\n   3. If not provided by CLI or TOML, the basename (last component) of the determined *Project Root* path is used as a fallback (e.g., ~/projects/my-app~ -> ~my-app~).\n\n* CLI Options\n\n** Configuration & Project Setup\n*** ~--context-file <CONTEXT_FILE>~\n    - *Purpose:* Specify path to the TOML config file.\n    - *Arguments:* ~<CONTEXT_FILE>~ (string path or filename).\n    - *Behavior:* Overrides default search (~.xtools/xcontext/xcontext.toml~ relative to project root). Tilde expansion performed. See SPEC.org for full path resolution logic.\n    - *Conflicts:* ~--disable-context-file~.\n*** ~--disable-context-file~\n    - *Purpose:* Disable loading any TOML config file.\n    - *Behavior:* Uses built-in defaults and CLI arguments only.\n    - *Conflicts:* ~--context-file~.\n*** ~--project-root <PATH>~\n    - *Purpose:* Specify the target project directory.\n    - *Arguments:* ~<PATH>~ (string path).\n    - *Behavior:* Sets the root directory for all operations. Order of resolution: 1) This flag, 2) `$PROJECT_ROOT` environment variable, 3) Current Working Directory (CWD). Tilde expansion is performed. Path is canonicalized.\n*** ~--project-name <NAME>~\n    - *Purpose:* Specify the project name.\n    - *Arguments:* ~<NAME>~ (string).\n    - *Behavior:* Overrides the project name determined from the config file or the project root directory's basename. Included in output if not excluded.\n\n** Configuration Utilities\n*** ~--config-show~\n    - *Purpose:* Display the *default* configuration structure (including determined project name and default meta) as TOML and exit.\n    - *Behavior:* Determines project root, gets default config, sets project name and default meta (`author=\"json\"`). Prints this structure as TOML to `stdout`. Does *not* show merged configuration. Bypasses context generation. Exits.\n    - *Conflicts:* Most other operational or utility modes.\n*** ~--config-save~\n    - *Purpose:* Save the *default* configuration structure (including determined project name and default meta) to the default file path and exit.\n    - *Behavior:* Determines project root and default config path. If exists, prompts user interactively. Saves the *default* configuration structure (with determined project name and default meta) as TOML. Bypasses context generation. Exits.\n    - *Conflicts:* Most other operational or utility modes.\n\n** Output Control\n*** ~--stdout~\n    - *Purpose:* Force output of the main context to standard output.\n    - *Behavior:* Ensures the final generated context is printed to `stdout`. This is the default if ~--save~ or ~--chunks~ are not used.\n    - *Conflicts:* ~--chunks~.\n*** ~-s, --save <SAVE_DIR>~\n    - *Alias:* `-s`\n    - *Purpose:* Save the generated context (and chunks) to a specified directory.\n    - *Arguments:* ~<SAVE_DIR>~ (string path).\n    - *Behavior:* Enables saving mode. Files are saved inside ~<SAVE_DIR>~ (relative to project root if not absolute). Overrides `stdout` default and config save directory. Creates directory if needed. Overwrites existing files without prompt.\n*** ~-f, --format <FORMAT>~\n    - *Alias:* `-f`\n    - *Purpose:* Set the output format for the main context.\n    - *Arguments:* ~<FORMAT>~ (string: `json`, `yaml`, `xml`).\n    - *Behavior:* Sets the output format. Determines serialization and default save extension.\n    - *Default:* `json`.\n*** ~--enable-json-minify~ / ~--disable-json-minify~\n    - *Purpose:* Control JSON output formatting.\n    - *Behavior:*\n      - ~--enable-json-minify~: Ensures JSON is compact (no extra whitespace). Default for JSON. Conflicts with ~--disable-json-minify~.\n      - ~--disable-json-minify~: Ensures JSON is pretty-printed (readable). Conflicts with ~--enable-json-minify~.\n    - *Note:* Ignored if format is not JSON.\n\n** Chunking\n*** ~-c, --chunks <SIZE_STRING>~\n    - *Alias:* `-c`\n    - *Purpose:* Split source file content into multiple chunk files for large contexts.\n    - *Arguments:* ~<SIZE_STRING>~ (string, e.g., `5MB`, `512kb`). Requires `kb` or `mb` suffix.\n    - *Behavior:* Enables chunking. Splits source files into multiple JSON files, keeping each below ~<SIZE_STRING>~. Implicitly enables saving. Requires `--format json`.\n    - *Conflicts:* ~--stdout~.\n\n** Watch Mode\n*** ~-w, --watch~\n    - *Alias:* `-w`\n    - *Purpose:* Automatically re-generate context when source files change.\n    - *Behavior:* Runs an initial generation, then monitors included source files, docs files, and the config file for changes. Re-generates context on change after a debounce delay. Runs until interrupted (Ctrl+C).\n    - *Conflicts:* Most other operational or utility modes.\n*** ~--watch-delay <DELAY_STRING>~\n    - *Purpose:* Set debounce delay for watch mode.\n    - *Arguments:* ~<DELAY_STRING>~ (string, e.g., `500ms`, `1s`).\n    - *Behavior:* Specifies the time to wait after detecting a file change before triggering regeneration in ~--watch~ mode. Overrides config file setting.\n    - *Default:* `300ms`.\n\n** Quick Content Mode\n*** ~-q, --quick <PATTERN>~\n    - *Alias:* `-q`\n    - *Purpose:* Quickly extract content of files matching a pattern, bypassing context generation.\n    - *Arguments:* ~<PATTERN>~ (glob pattern string).\n    - *Behavior:* Determines project root. Finds files matching ~<PATTERN>~ within the root, respecting `.gitignore` and *soft ignores* by default (override with ~--disable-gitignore~ / ~--disable-soft-ignore~). Reads matched files. Outputs *only* a simple structure (`{ \"files\": { \"<path>\": \"<content>\", ... } }`) to `stdout` using the specified ~--format~. Exits.\n    - *Conflicts:* Most other operational or utility modes.\n\n** Utility Modes (Show)\n*** ~--show-meta <KEY>~ / ~--show-meta-all~\n    - ~--show-meta <KEY>~:\n      - *Purpose:* Display specific `[meta]` key's value, or list keys if none given.\n      - *Arguments:* ~<KEY>~ (optional string).\n      - *Behavior:* Displays the final value for ~<KEY>~ from the merged `[meta]` section (config + `--add-meta` overrides). If no ~<KEY>~ is provided, lists available keys. Exits.\n      - *Conflicts:* ~--show-meta-all~, most other modes.\n    - ~--show-meta-all~:\n      - *Purpose:* Display all metadata key-value pairs and exit.\n      - *Behavior:* Displays all key-value pairs from the merged `[meta]` section. Exits.\n      - *Conflicts:* ~--show-meta~, most other modes.\n*** ~--show-prompt <PROMPT_NAME>~ / ~--show-prompts~\n    - ~--show-prompt <PROMPT_NAME>~:\n      - *Purpose:* Display specific prompt's text, or list names if none given.\n      - *Arguments:* ~<PROMPT_NAME>~ (optional string).\n      - *Behavior:* Displays the text of a specific prompt (built-in or from config `[prompts]` section) by its name. If no `NAME` is provided, lists available prompt names. Exits.\n      - *Conflicts:* ~--show-prompts~, most other modes.\n    - ~--show-prompts~:\n      - *Purpose:* Display all available prompt names and their text, then exit.\n      - *Behavior:* Displays all available prompts (built-in merged with config `[prompts]`) with their names and full text content. Exits.\n      - *Conflicts:* ~--show-prompt~, most other modes.\n*** ~--show-rule <RULE_NAME>~ / ~--show-rules~\n    - ~--show-rule <RULE_NAME>~:\n      - *Purpose:* Display specific *static* ruleset's text, or list names if none given.\n      - *Arguments:* ~<RULE_NAME>~ (optional string).\n      - *Behavior:* Displays the text content of a specific *static* (built-in) ruleset by its name (e.g., `rust_coding`). If no `NAME` is provided, lists available static names. Exits.\n      - *Conflicts:* ~--show-rules~, most other modes.\n    - ~--show-rules~:\n      - *Purpose:* Display available rules (static names/content, custom names/content), then exit.\n      - *Behavior:* Displays the names and full content of all available *static* rulesets and *custom rule lists* defined in the config `[rules]` section. Exits.\n      - *Conflicts:* ~--show-rule~, most other modes.\n\n** Utility Modes (Info)\n*** ~--metrics~\n    - *Purpose:* Display project statistics (files, lines, bytes, tokens) and exit.\n    - *Behavior:* Calculates and displays statistics (total counts and per-file details with human-readable sizes) for the files that *would* be included in the context (source + docs). Outputs as JSON to `stdout`, then exits.\n    - *Conflicts:* Most other operational or utility modes.\n*** ~--debug~\n    - *Purpose:* Show effective config and planned file inclusions for debugging, then exit.\n    - *Behavior:* Displays the final effective configuration object and the lists of relative paths for tree, source, and docs files that would be included based on that config. Outputs as JSON to `stdout`, then exits.\n    - *Conflicts:* Most other operational or utility modes.\n\n** Completions Utilities\n*** ~--completions-fish-show~ / ~--completions-fish-save~\n    - ~--completions-fish-show~:\n        - *Purpose:* Generate Fish shell completions and print to stdout.\n        - *Conflicts:* ~--completions-fish-save~, most other modes.\n    - ~--completions-fish-save~:\n        - *Purpose:* Generate and save Fish shell completions to the default directory.\n        - *Behavior:* Saves to `~/.config/fish/completions/xcontext.fish`, overwriting.\n        - *Conflicts:* ~--completions-fish-show~, most other modes.\n\n** Core Context Exclusion\n*** ~--exclude-project-name~ / ~--exclude-project-root~ / ~--exclude-timestamp~\n    - *Purpose:* Omit corresponding core fields from the output context.\n    - *Behavior:* Prevents the specified field (`project_name`, `project_root`, `generation_timestamp`) from appearing. Overrides corresponding `[output].include_*` config setting.\n*** ~--exclude-system-info~\n    - *Purpose:* Omit system information from the output context.\n    - *Behavior:* Prevents the `system_info` section from appearing. Skips internal system info gathering. Overrides TOML `[output].include_system_info = true`.\n\n** Section Toggles\n*** ~--enable-tree~ / ~--disable-tree~\n*** ~--enable-source~ / ~--disable-source~\n*** ~--enable-meta~ / ~--disable-meta~\n*** ~--enable-rules~ / ~--disable-rules~\n*** ~--enable-docs~ / ~--disable-docs~\n    - *Purpose:* Control the inclusion of specific context sections.\n    - *Behavior:* Overrides the corresponding `[section].enabled` setting in the TOML config. `enable` is generally the default.\n\n** Ignore Toggles\n*** ~--enable-gitignore~ / ~--disable-gitignore~\n    - *Purpose:* Globally control whether ~.gitignore~ files are respected.\n    - *Behavior:* Overrides the `use_gitignore` setting in TOML `[general]`. Explicit filters take precedence. Default is enabled.\n*** ~--enable-soft-ignore~ / ~--disable-soft-ignore~\n    - *Purpose:* Control the default ignoring of common files/directories.\n    - *Behavior:*\n        - ~--enable-soft-ignore~: (Default) Ignores a predefined list (e.g., `*.lock`, `.gem/`, `.vscode/`, `target/`).\n        - ~--disable-soft-ignore~: Prevents ignoring the predefined list.\n    - *Precedence:* Soft ignores have lower precedence than `.gitignore` and explicit include/exclude filters.\n    - *Ignored Patterns (Default):* `Cargo.lock`, `Gemfile.lock`, `yarn.lock`, `pnpm-lock.yaml`, `package-lock.json`, `.rubocop.yml`, `.dir-locals.el`, `.projectile`, `.gem/`, `.zed/`, `.idea/`, `.vscode/`, `.xtools/`, `target/`, `.cache/`, `node_modules/`, `vendor/`, `build/`, `dist/`, `*.pyc`, `__pycache__/`, `.DS_Store`.\n\n** Content Filtering\n*** ~--tree-include <PATTERN_OR_PATH>...~\n*** ~--tree-exclude <PATTERN_OR_PATH>...~\n*** ~--source-include <PATTERN_OR_PATH>...~\n*** ~--source-exclude <PATTERN_OR_PATH>...~\n*** ~--docs-include <PATTERN_OR_PATH>...~\n*** ~--docs-exclude <PATTERN_OR_PATH>...~\n    - *Purpose:* Add include/exclude filters for specific sections.\n    - *Arguments:* ~<PATTERN_OR_PATH>~ (string path or glob pattern). Can be used multiple times.\n    - *Behavior:* Appends items to the corresponding list from the TOML config. Excludes take precedence over includes, gitignore, and soft ignores.\n\n** Metadata Override\n*** ~--add-meta <key=value>...~\n    - *Purpose:* Add/override key-value pairs in the `meta` section.\n    - *Arguments:* ~<key=value>~ (string). Can be used multiple times.\n    - *Behavior:* Adds or overrides key-value pairs in the `meta` data. Use format `key=value`. Overrides values from config file.\n\n** Other Utilities\n*** ~-v, --version~\n    - *Purpose:* Display version information and exit.\n    - *Behavior:* Handled automatically by clap.\n*** ~-cl~\n    - *Purpose:* Clear the terminal screen and exit.\n    - *Conflicts:* Cannot be used with most other operational or utility modes.\n\n* Error Handling / Exit Codes\n  - `0`: Success\n  - `1`: Config/TOML Parse/Serialize Error\n  - `2`: Filesystem/IO/WalkDir/Ignore/Glob Error\n  - `3`: Chunking Error\n  - `4`: System Info Error\n  - `5`: Invalid Argument Error\n  - `6`: Output Serialization Error (JSON/YAML/XML)\n  - `7`: Utility Mode Error (e.g., item not found in --show-*)\n  - `8`: TikToken Error\n  - `9`: Watch Mode Error\n"},{"path":"README.org","content":"#+TITLE: xcontext: Generate Structured Project Context for AI\n#+DATE: <2025-04-21 Mon>\n#+AUTHOR: json & Gemini\n#+STARTUP: showeverything\n#+OPTIONS: toc:t\n\n* Overview\n~xcontext~ is a command-line tool designed to generate comprehensive, structured context about software projects. This context, typically output as JSON, YAML, or XML, is ideal for feeding into AI models like LLMs to enable tasks such as code analysis, refactoring, documentation generation, and more.\n\nThe tool scans your project based on flexible configuration, gathers information about the project structure (tree), documentation files, source code files, system environment (*internally*), and user-defined metadata/rules. It includes a dynamic \"AI Readme\" within the output to help explain the context structure and purpose to an AI. It prioritizes user convenience and performance through parallel processing.\n\nKey features include:\n- Layered configuration (Defaults -> TOML File -> CLI Flags) using snake_case keys in TOML.\n- Option to disable TOML file loading (~--disable-context-file~).\n- Automatic project root detection (CLI -> Env Var -> CWD).\n- Detailed context generation (project name, root, timestamp, meta, system info, tree, docs, source, rules). Output field order is consistent.\n- *Enhanced AI Readme*: Includes an `ai_readme` field with improved guidance explaining the included sections and their purpose for AI processing.\n- Optional exclusion of core fields (~--exclude-project-name~, ~--exclude-project-root~, ~--exclude-timestamp~, ~--exclude-system-info~).\n- Selective inclusion/exclusion of context sections via flags or config (`[section].enabled` or `--enable/disable-section`).\n- Flexible filtering of files/folders for tree, docs, and source using paths and glob patterns (respects `.gitignore` by default, configurable globally via `[general].use_gitignore` or `--enable/disable-gitignore`, and per-section). Patterns like ~\\\"meta\\\"~ match the directory and contents.\n- *Default Soft Ignores*: Ignores common temporary/editor/build files by default (toggle via `--enable/disable-soft-ignore`).\n- Separate handling for documentation files (excluded from source).\n- *Nested Source Representation*: Source code included under a `source` key, containing either a `files` array (inline content) or a `chunks` array (paths to chunk files).\n- *Structured Rules Output*: Rules included under a `rules` key as a map, where keys are the rule set names (e.g., `instructions`, `project_rules`) and values are lists of rules (prefixed with `- `).\n- Multiple output formats (~json~, ~yaml~, ~xml~, use `-f`) with optional JSON minification (`[output].json_minify` or `--enable/disable-json-minify`).\n- Default output to `stdout` for easy piping.\n- Optional saving of context to disk (`-s, --save`).\n- Chunking of large source content into multiple files (`-c, --chunks`, JSON only).\n- Watch mode (`-w, --watch`) to automatically regenerate context on file changes (watches source, docs, and config file).\n- Quick mode (`-q, --quick`) to extract specific file contents without full context generation.\n- Utility modes for displaying the *default* configuration (~--config-show~), saving the *default* configuration (~--config-save~), showing metadata or listing keys (~--show-meta <KEY>~, ~--show-meta-all~), showing predefined prompts/rules or listing names/content (~--show-prompt <NAME>~, ~--show-prompts~, ~--show-rule <NAME>~, ~--show-rules~), debugging file inclusions (~--debug~), and viewing detailed project metrics including human-readable sizes (~--metrics~).\n- *Shell completion generation* for Fish (~--completions-fish-show~, ~--completions-fish-save~).\n- *Screen Clear*: Simple utility to clear the terminal screen (`-cl`).\n- Predefined prompts and rules loaded from embedded `data/*.yaml` files, extendable via TOML config (`[prompts]`, `[rules]`). Custom metadata defined directly under `[meta]`.\n\n* Requirements\n** System Requirements\n   - Operating System: Linux (tested on Fedora, likely compatible with others).\n   - Rust Toolchain: Cargo and Rust compiler (check `Cargo.toml` for version).\n   - *For Fish Completions:* Fish shell installed.\n   (*No external commands like `xsystem` are required anymore.*)\n\n** Development Dependencies (Building from source)\n   - Standard Rust build tools.\n   - Key crates used: ~clap~, ~clap_complete~, ~serde~, ~toml~, ~ignore~, ~walkdir~, ~rayon~, ~notify-debouncer-mini~, ~serde_json~, ~serde_yml~, ~quick-xml~, ~shellexpand~, ~tiktoken-rs~, ~chrono~, ~thiserror~, ~once_cell~, ~parse_duration~, ~byte-unit~, ~dirs~, ~sysinfo~, ~clearscreen~. (See `Cargo.toml` for full list).\n\n* Installation\n** From Source\n   1. Clone the repository.\n   2. Navigate to the project directory.\n   3. Build and install using Cargo:\n      #+BEGIN_SRC shell\n        cargo install --path .\n      #+END_SRC\n      This will typically place the `xcontext` binary in `~/.cargo/bin/`. Alternatively, build a release binary:\n      #+BEGIN_SRC shell\n        cargo build --release\n      #+END_SRC\n      The binary will be located at `target/release/xcontext`. You can copy this to a directory in your system's ~PATH~.\n\n* Setup (Configuration)\n** Configuration File\n   - ~xcontext~ uses a TOML configuration file, typically located at ~.xtools/xcontext/xcontext.toml~ relative to the detected project root.\n   - Configuration keys within sections should use snake_case (e.g., `use_gitignore`, `json_minify`).\n   - You can specify a different configuration file using the ~--context-file~ flag.\n   - You can prevent loading any TOML file using ~--disable-context-file~.\n** Generating a Starting Configuration\n   - The recommended way to get a starting configuration file is:\n     1. Run ~xcontext --config-show > ~/.xtools/xcontext/xcontext.toml~ (or your desired path). This captures the *default* configuration structure (including default meta and determined project name) as a base, using snake_case keys.\n     2. Manually edit the generated TOML file to customize settings.\n   - Alternatively, use ~xcontext --config-save~ which does the same but prompts for overwrite.\n   - You can also manually create the file based on the structure outlined in [[file:SPEC.org::*Configuration (TOML)]]. A sample config is also available [[file:xcontext.toml::][here]].\n** Configuration Loading\n   - Settings are layered: Defaults -> TOML File (unless disabled) -> CLI Flags (CLI has highest priority).\n   - Use ~xcontext --debug~ to see the final *effective* configuration *and* the files that would be included for a given run. (~--config-show~ now only shows defaults).\n** Shell Completions (Fish)\n   - To enable Fish shell completions:\n     #+BEGIN_SRC shell\n       # Save the completion script to the standard location\n       xcontext --completions-fish-save\n\n       # Alternatively, view the script and save it manually\n       # xcontext --completions-fish-show > ~/.config/fish/completions/xcontext.fish\n     #+END_SRC\n   - You may need to restart your Fish shell for the completions to take effect.\n\n* Usage\n  #+BEGIN_SRC shell\n    xcontext [OPTIONS]\n  #+END_SRC\n  - Run within your project directory or use ~--project-root~ to specify the target.\n  - By default, prints the generated context (JSON, minified) to standard output. Output includes an `ai_readme` field explaining the content structure based on active settings.\n\n* Examples\n** Basic Usage\n   #+BEGIN_SRC shell\n     # Generate context for the current directory and view it\n     xcontext | less\n\n     # Generate context for a different project\n     xcontext --project-root /path/to/another/project\n\n     # Generate context in YAML format (using alias)\n     xcontext -f yaml\n\n     # Generate pretty-printed JSON (overrides TOML json_minify = true)\n     xcontext --disable-json-minify\n\n     # Generate context without loading any TOML config file\n     xcontext --disable-context-file\n\n     # Generate context excluding the project name and timestamp\n     xcontext --exclude-project-name --exclude-timestamp\n\n     # Clear the screen (using alias)\n     xcontext -cl\n   #+END_SRC\n\n** Saving & Chunking\n   #+BEGIN_SRC shell\n     # Save context as JSON to a specific directory (e.g., ./output, using alias)\n     xcontext -s ./output\n\n     # Save context as XML to a specific output directory (using aliases)\n     xcontext -f xml -s ./output_files\n\n     # Chunk source files into ~5MB JSON files and save to ./output (using aliases)\n     # Main context file will have a 'source.chunks' field pointing to chunk files\n     xcontext -c 5MB -s ./output\n\n     # Chunk source files into ~512KB JSON files (implicitly saves, using alias)\n     xcontext -c 512kb\n   #+END_SRC\n\n** Filtering Content\n   #+BEGIN_SRC shell\n     # Only include Rust source files and Cargo.toml (using CLI appends)\n     # Assumes TOML [source].include might already have patterns\n     xcontext --source-include 'src/**/*.rs' --source-include 'Cargo.toml'\n\n     # Exclude test directories from source (using CLI appends)\n     # This will match the 'tests' directory and its contents\n     xcontext --source-exclude 'src/tests'\n\n     # Include only Markdown files as documentation, disabling source\n     xcontext --disable-source --enable-docs --docs-include '**/*.md'\n\n     # Generate context but ignore .gitignore files globally\n     xcontext --disable-gitignore\n\n     # Generate context without using the default soft ignores\n     xcontext --disable-soft-ignore\n   #+END_SRC\n\n** Watch Mode\n   #+BEGIN_SRC shell\n     # Watch for changes and print context to stdout (uses delay from config or default, using alias)\n     xcontext -w\n\n     # Watch for changes and save to disk with a 1-second delay (using aliases)\n     xcontext -w --watch-delay 1s -s .\n   #+END_SRC\n\n** Quick Mode\n   #+BEGIN_SRC shell\n     # Quickly output content of all TOML files as JSON (bypasses full context, using alias)\n     xcontext -q '**/*.toml'\n\n     # Quickly output content of main.rs as YAML (using aliases)\n     xcontext -q src/main.rs -f yaml\n   #+END_SRC\n\n** Utility Modes\n   #+BEGIN_SRC shell\n     # Show the *default* configuration structure (not the merged one)\n     xcontext --config-show\n\n     # Save the *default* configuration structure (prompts for overwrite)\n     xcontext --config-save\n\n     # Show all available built-in and configured prompts\n     xcontext --show-prompts\n\n     # Show a specific prompt (e.g., 'my_prompt' defined in config or built-in)\n     xcontext --show-prompt my_prompt\n     # List available prompt names\n     xcontext --show-prompt\n\n     # Show available rule definitions (static names/content + custom names/content)\n     xcontext --show-rules\n\n     # Show details for a specific built-in ruleset\n     xcontext --show-rule instructions\n     # List available static ruleset names\n     xcontext --show-rule\n\n     # Show all custom metadata key-value pairs from merged config\n     xcontext --show-meta-all\n\n     # Show the value for a specific metadata key from merged config\n     xcontext --add-meta version=1.1 --show-meta version\n     # List available metadata keys from merged config\n     xcontext --show-meta\n\n     # Show overall project metrics (including readable sizes and per-file details)\n     xcontext --metrics | less\n\n     # Show detailed debug information (effective config + file lists)\n     xcontext --debug | less\n\n     # Show Fish shell completion script\n     xcontext --completions-fish-show\n\n     # Save Fish shell completion script\n     xcontext --completions-fish-save\n   #+END_SRC\n\n* Configuration Details\n  Configuration is layered (Defaults -> TOML File -> CLI Flags). See the TOML structure and detailed explanations in [[file:SPEC.org]] and the full CLI options list in [[file:CLI.org]]. The main sections in `xcontext.toml` are:\n  - `[general]`: `project_name`, default `use_gitignore`, `enable_soft_ignore`.\n  - `[meta]`: `enabled`, custom key-value pairs directly under this section (e.g., `author = \\\"json\\\"`).\n  - `[docs]`: `enabled`, `use_gitignore`, section-specific `include`/`exclude`.\n  - `[tree]`: `enabled`, `use_gitignore`, section-specific `include`/`exclude`.\n  - `[source]`: `enabled`, `use_gitignore`, section-specific `include`/`exclude`.\n  - `[rules]`: `enabled`, `static_rules` (list of names), custom rule lists (e.g., `my_rules = [...]`). Keys should be snake_case.\n  - `[prompts]`: Custom prompts (e.g., `my_prompt = \\\\\\\"...\\\\\\\"`). Keys should be snake_case.\n  - `[output]`: `format`, `json_minify`, `include_project_name`, `include_project_root`, `include_timestamp`, `include_system_info`. Keys should be snake_case.\n  - `[save]`: `output_dir`, `filename_base`, `extension`. Keys should be snake_case.\n  - `[watch]`: `delay`. Key should be snake_case.\n\n* Output Structure Summary\n  The generated output (JSON/YAML/XML) contains the following top-level fields (order roughly as shown):\n  - `ai_readme`: (String) An enhanced guide for AI explaining the included fields and their purpose.\n  - `project_name`: (String, Optional) The determined project name.\n  - `project_root`: (String, Optional) The absolute path to the project root.\n  - `system_info`: (Object, Optional) Information about the generation environment (gathered internally).\n  - `meta`: (Object, Optional) Key-value pairs from `[meta]` section and `--add-meta`.\n  - `docs`: (Array, Optional) List of documentation files: `{ \\\"path\\\": \\\"...\\\", \\\"content\\\": \\\"...\\\" }`.\n  - `tree`: (Array, Optional) Hierarchical representation of the directory structure.\n  - `source`: (Object, Optional) Contains *either* `files` or `chunks`:\n    - `files`: (Array) List of source files: `{ \\\"path\\\": \\\"...\\\", \\\"content\\\": \\\"...\\\" }`.\n    - `chunks`: (Array) List of relative paths to chunk files (String).\n  - `rules`: (Object, Optional) Map where keys are rule set names (e.g., `instructions`, `project_rules`) and values are lists of rule strings (prefixed with `- `).\n  - `generation_timestamp`: (String, Optional) ISO 8601 timestamp of generation.\n\n* References\n  - [[file:CLI.org][CLI Options Specification]]\n  - [[file:SPEC.org][Detailed Specification & TOML Structure]]\n  - [[file:xcontext.toml][Sample Configuration File]]\n\n* License\n"},{"path":"SPEC.org","content":"#+TITLE: xcontext Specification (Final Agreed Plan)\n#+AUTHOR: json & Gemini\n#+DATE: <2025-04-21 Mon>\n#+VERSION: ~1.1.0 (Planned)\n\n* SPECIFICATION\n** Purpose\n   Generate structured project context (metadata, system info, project root, directory tree, documentation files, source files, AI rules) suitable for AI models. The tool aims for clarity, consistency, user convenience, parallel performance, flexible configuration (TOML/CLI), multiple output formats, optional file saving/chunking, watch mode, quick content extraction, enhanced documentation/metrics handling, shell completion generation, and various utility modes. Includes an enhanced dynamic AI Readme guide within the output.\n\n** Overview\n   ~xcontext~ is a Rust-based command-line interface (CLI) tool designed for creating comprehensive, machine-readable project context. It determines a project root (via CLI, Env Var, or CWD), loads configuration from a TOML file (found via default path or explicit flag with flexible resolution, unless disabled via CLI), and overrides settings via CLI flags. TOML configuration keys within sections should use snake_case (e.g., `use_gitignore`). It gathers system information (*internally using `sysinfo` crate*), project metadata, directory structure, documentation files, and source code files, respecting `.gitignore` rules (configurable) and *default soft ignores* (configurable), and handling directory glob patterns intuitively. It outputs this context in JSON (default, minified), YAML, or XML format, primarily to `stdout`. The output includes an enhanced `ai_readme` field dynamically describing the included content and its purpose. Source code is presented under a `source` key, containing either inline `files` or references to `chunks`. Rules are presented as a map where keys are rule set names (e.g., `instructions`, `project_rules`) and values are lists of rules. Optional features include saving output to disk, chunking large source content (JSON only), watching source/docs files for changes and regenerating, extracting only specified file content quickly, generating shell completions (Fish), and utility modes for default config management, information display (including metrics with readable sizes), and listing available prompts/rules/metadata keys. Also includes a simple screen clear utility (`-cl`).\n\n** Goals\n   - *Rich Context Generation*: Produce comprehensive project snapshots including metadata, environment details, structure, docs, code, and rules, in a consistent order.\n   - *Enhanced AI Readme*: Automatically include a dynamic guide within the output explaining the included sections and their purpose for AI.\n   - *User Convenience*: Prioritize ease of use with sensible defaults, flexible configuration, clear CLI options (*with aliases*), interactive show flags (listing items when no arg is given), simple screen clear (`-cl`), and helpful utility modes.\n   - *Flexible Output*: Default to `stdout` for piping, offer explicit saving, support multiple formats (JSON/YAML/XML), and optional JSON minification.\n   - *Structured Source/Rules*: Represent source code consistently (nested under `source`) and group rules by origin (*using rule set name as key*).\n   - *Scalable Performance*: Handle large projects efficiently using parallel file processing.\n   - *Size-Based Chunking (JSON Only)*: Reliably split large source code collections into manageable chunks (requires `kb`/`mb` units).\n   - *Documentation Handling*: Allow separate identification and inclusion of documentation files, excluding them from the main source list.\n   - *Intuitive Globbing*: Handle directory patterns (e.g., `\\\"meta\\\"`) to match the directory and its contents.\n   - *Watch Mode*: Provide an integrated file watcher to automatically regenerate context on changes.\n   - *Quick Mode*: Offer a simple way to extract specified file content without full context generation.\n   - *Shell Completions*: Generate completion scripts for supported shells (currently Fish).\n   - *Layered Configuration*: Implement clear configuration precedence (Defaults -> TOML -> CLI). Use snake_case for TOML keys.\n   - *Built-in System Info*: Gather basic system info *without external commands*.\n   - *Default Soft Ignores*: Ignore common temporary/editor/build files by default (configurable via `--enable/disable-soft-ignore`).\n   - *Robustness & Debugging*: Provide clear error reporting, distinct exit codes, debug modes for file inclusion, *default* config inspection modes (~--config-show~, ~--config-save~), and enhanced metrics (~--metrics~).\n\n** Use Cases\n   - Pipe context to another tool: ~xcontext | jq .~\n   - Generate default context and view: ~xcontext | less~\n   - Save context to a specific directory: ~xcontext -s /path/to/output~ (using alias)\n   - Save context with YAML format: ~xcontext -s . -f yaml~ (using aliases)\n   - Generate and chunk large JSON context: ~xcontext -c 10MB -s .~ (using aliases)\n   - Show *default* configuration structure: ~xcontext --config-show~\n   - Save *default* configuration structure to default file: ~xcontext --config-save~ (Prompts overwrite)\n   - Show all built-in and configured prompts: ~xcontext --show-prompts~\n   - Show specific configured prompt: ~xcontext --show-prompt my_api_prompt~\n   - List available prompt names: ~xcontext --show-prompt~\n   - Show available rule definitions (static and custom): ~xcontext --show-rules~ (Shows content)\n   - Show specific static ruleset: ~xcontext --show-rule instructions~\n   - List available static ruleset names: ~xcontext --show-rule~\n   - Show effective configuration and file lists: ~xcontext --debug~\n   - Get project statistics (with readable sizes): ~xcontext --metrics | less~\n   - Generate context ignoring `.gitignore`: ~xcontext --disable-gitignore~\n   - Generate context *without* soft ignores: ~xcontext --disable-soft-ignore~\n   - Generate context using only defaults and CLI flags: ~xcontext --disable-context-file --source-include 'src/**'~\n   - Watch for changes and save: ~xcontext -w -s .~ (using aliases)\n   - Quickly get Markdown file content as JSON: ~xcontext -q '**/*.md'~ (using alias)\n   - Generate context including specific docs and excluding specific source: ~xcontext --docs-include 'README.*' --source-exclude 'src/legacy/**'~\n   - Generate context excluding project name and timestamp: ~xcontext --exclude-project-name --exclude-timestamp~\n   - Generate Fish shell completions: ~xcontext --completions-fish-show~\n   - Save Fish shell completions: ~xcontext --completions-fish-save~\n   - Clear the screen: ~xcontext -cl~\n\n** Configuration Sources & Precedence\n   The final configuration settings are determined by applying layers in the following order, with later layers overriding earlier ones:\n   1. *Built-in Defaults*: Hardcoded default values within the application.\n   2. *TOML File*: Reads settings from the configuration file found using the default path or the path specified by ~--context-file~ (using the defined resolution logic), *unless* ~--disable-context-file~ is used. Keys within sections must be snake_case. Values found here override the built-in defaults.\n   3. *CLI Flags*: Any options provided on the command line override corresponding settings from both TOML and defaults.\n\n** Configuration (TOML)\n\n   The application looks for a configuration file, typically named `xcontext.toml`. The exact path is found via the logic defined for the ~--context-file~ flag, defaulting to checking ~.xtools/xcontext/xcontext.toml~ within the project root. Loading can be skipped entirely using ~--disable-context-file~.\n\n   *Keys within sections MUST use snake_case.*\n\n*** Gitignore Handling Logic\n    1. *Global Default*: The primary default is set in `[general].use_gitignore` (defaults internally to `true`). This can be overridden globally by CLI flags ~--enable/disable-gitignore~.\n    2. *Section Override*: The effective global setting can be overridden specifically for tree generation, source collection, or docs collection by setting `use_gitignore` within the corresponding `[tree]`, `[source]`, or `[docs]` sections.\n       - `use_gitignore = true`: Force enable gitignore for this section.\n       - `use_gitignore = false`: Force disable gitignore for this section.\n       - `use_gitignore = \"inherit\"`: Use the effective global setting (from `[general]` or CLI override) for this section. This is also the *default* if the key is omitted within the section.\n    3. *Explicit Filter Precedence*: Any path or pattern specified in a section's `include` or `exclude` filters (in TOML or via CLI) *always* takes precedence over any applicable `.gitignore` rule for that section.\n\n*** Soft Ignore Handling Logic\n    1. *Global Toggle*: Controlled by `[general].enable_soft_ignore` (defaults to `true`). Overridden globally by CLI flags ~--enable/disable-soft-ignore~.\n    2. *Behavior*: When enabled, a predefined list of common patterns (e.g., `*.lock`, `.vscode/`, `target/`) is added to the exclusion list with lower precedence than explicit filters and `.gitignore`.\n    3. *Precedence Order* (highest to lowest): Explicit Exclude -> Explicit Include -> `.gitignore` (if enabled) -> Soft Ignore (if enabled) -> Default Include All.\n\n*** TOML Structure & Defaults (Recommended - Using snake_case)\n    #+BEGIN_SRC toml\n      # General settings for the project\n      [general]\n      # project_name = \"MyProject\" # Optional: Overridden by CLI --project-name. Default: basename of project root.\n      use_gitignore = true      # Default gitignore behavior. Sections can override below. Overridden by CLI --enable/disable-gitignore.\n      enable_soft_ignore = true # Default soft ignore behavior. Overridden by CLI --enable/disable-soft-ignore.\n\n      # Metadata section (keys are flattened)\n      [meta]\n      enabled = true            # Control inclusion via --enable/disable-meta. Default author=\"json\" added automatically.\n      # --- Custom Meta Fields ---\n      # Add any key-value pairs directly here (keys are user-defined snake_case recommended).\n      # Overridden/Added by CLI --add-meta.\n      # version = \"1.0\"\n\n      # Documentation file collection settings\n      [docs]\n      enabled = true            # Control inclusion via --enable/disable-docs (effective only if include is non-empty)\n      use_gitignore = \"inherit\" # Options: inherit, true, false. Inherits from [general].use_gitignore\n      # --- Section-Specific Filters ---\n      include = [\"*.org\", \"*.md\", \"README*\", \"LICENSE*\"] # Default. Appended by --docs-include.\n      exclude = []              # Default: empty. Appended by --docs-exclude.\n\n      # Directory tree generation settings\n      [tree]\n      enabled = true            # Control inclusion via --enable/disable-tree\n      use_gitignore = \"inherit\" # Options: inherit, true, false. Inherits from [general].use_gitignore\n      # --- Section-Specific Filters ---\n      include = []              # Default: empty. Define ALL include patterns ONLY for the tree view here. Appended by --tree-include.\n      exclude = [\"meta/\"]       # Default. Define ALL exclude patterns ONLY for the tree view here. Appended by --tree-exclude.\n\n      # Source file collection settings\n      [source]\n      enabled = true            # Control inclusion via --enable/disable-source\n      use_gitignore = \"inherit\" # Options: inherit, true, false. Inherits from [general].use_gitignore\n      # --- Section-Specific Filters ---\n      include = []              # Default: empty. Define ALL include patterns ONLY for source files here. Appended by --source-include.\n      exclude = [\"meta/\"]       # Default. Define ALL exclude patterns ONLY for source files here. Appended by --source-exclude.\n\n      # AI Prompting Rules settings\n      [rules]\n      enabled = true                  # Control inclusion via --enable/disable-rules\n      static_rules = [\"instructions\", \"general_coding\"] # Default. Optional: List of built-in ruleset names (from data/rules.yaml)\n      # --- Custom Rule Lists ---\n      # Add custom lists using snake_case keys: list_name = [\"Rule 1\", \"Rule 2\"]\n      # The list_name will be used as the key in the final JSON output.\n      # project_rules = [\"Rule specific to this project.\"]\n      # api_guidelines = [\"Follow REST principles.\", \"Use JWT for auth.\"]\n\n      # Predefined Prompts (Used only by '--show-prompt*' utilities)\n      [prompts]\n      # Add custom prompts here using snake_case keys, accessible via --show-prompt <key> or listed by --show-prompts\n      # my_prompt = \\\"...\\\"\n      # review_code = \\\"Review the provided code context...\\\"\n\n      # Output settings\n      [output]\n      format = \"json\"           # \"json\", \"yaml\", \"xml\". Overridden by -f/--format.\n      json_minify = true        # Minify JSON output? Overridden by --enable/disable-json-minify. (Ignored for yaml/xml)\n      include_project_name = true # Include 'project_name' field? Overridden by --exclude-project-name.\n      include_project_root = true # Include 'project_root' field? Overridden by --exclude-project-root.\n      include_timestamp = true  # Include 'generation_timestamp' field? Overridden by --exclude-timestamp.\n      include_system_info = true # Include 'system_info' field? Overridden by --exclude-system-info. (No external command needed)\n\n      # Save settings (Defaults used when saving is active via --save or --chunks)\n      [save]\n      output_dir = \".xtools/xcontext/cache\" # Default save directory (relative to project root). Overridden by --save <dir>.\n      # filename_base = \"\"        # Optional base filename (Default: project name). Used for main context and chunks.\n      # extension = \"\"            # Optional file extension (Default: based on format). Used for main context and chunks.\n\n      # Watch mode settings\n      [watch]\n      delay = \"300ms\"           # Debounce delay (e.g., \"500ms\", \"1s\"). Overridden by --watch-delay.\n    #+END_SRC\n\n** CLI Options Summary\n   Refer to the accompanying `CLI.org` document for the detailed list and behavior of all planned CLI options.\n\n** Output Format & Location\n   - Output destination defaults to `stdout`. Enabled explicitly via `--save` or implicitly via `--chunks`.\n   - Save path determined by `--save` flag, or TOML `[save]` defaults, typically within `.xtools/xcontext/cache`.\n   - Chunking splits source files based on `--chunks <SIZE_STRING>` (requires `kb`/`mb`). Main context file references chunk files within `source.chunks`.\n   - The final context structure includes optional sections based on configuration: `ai_readme`, `project_name`, `project_root`, `system_info`, `meta`, `docs`, `tree`, `source` (which contains either `files` or `chunks`), `rules`, `generation_timestamp`. The order of fields in the output is fixed as listed here. See [[file:README.org::*Output Structure Summary][README Output Summary]] for details.\n     - `system_info` gathered internally via `sysinfo` crate.\n     - `rules` keys are the rule set names (e.g., `instructions`, `project_rules`), values are lists of rules.\n\n** Implementation Notes\n   - *Dependencies*: Ensure `sysinfo` is included. Remove `subprocess`. Ensure `notify`, `notify-debouncer-mini`, `byte-unit`, `shellexpand`, `once_cell`, `parse_duration`, `clap_complete`, `dirs`, `clearscreen` are included.\n   - *System Info*: `system_info.rs` uses `sysinfo` crate to gather data. No external commands needed.\n   - *File Gathering*: `gather.rs` uses `ignore` crate. Handles soft ignores via `ignore::overrides::OverrideBuilder`. Filters (`include`/`exclude`) are applied per-section (`tree`, `source`, `docs`). Gitignore handling uses `[general].use_gitignore` default and section overrides. Glob handling treats directory patterns like `\\\"meta\\\"` as matching the directory and its contents.\n   - *Config*: `config.rs` structs reflect the TOML structure (using snake_case keys). Added `enable_soft_ignore` to `GeneralConfig`. `load_and_merge` implements layering, handles `disable_context_file`. Custom metadata keys flattened under `[meta]`. `MetaConfig::default()` adds `author=\"json\"`. Defaults updated. Order of fields in `Config` struct defines TOML output order.\n   - *Context*: `ProjectContext` struct matches output. Order of fields defines output order. `ai_readme` generated dynamically with enhanced content. `source` field holds `SourceRepresentation` (with `files` or `chunks`). `rules` field holds `HashMap<String, Vec<String>>` (rule set name -> rules list). Rules prefixed with `- ` during collection/storage.\n   - *Main Logic*: Handles utility modes first (clear screen, completions, config show/save, show flags). Loads merged config only if needed for quick/watch/generation/debug/metrics. Calls `populate_ai_readme` before output. Handles debug/metrics within main generation flow but exits early. `--config-show`/`--config-save` operate on `Config::default()` with project name/meta injected.\n   - *Error Handling*: Uses `AppError` enum and distinct exit codes. Update code 4 description.\n   - *CLI Parsing*: `cli.rs` uses `clap` to match `CLI.org`. Added aliases. Added `-cl` flag. Utility modes made mutually exclusive with operational modes. Show flags (`--show-prompt`, `--show-rule`, `--show-meta`) have optional arguments. Version handled by `clap::ArgAction::Version`.\n   - *Data Embedding*: `utils/show.rs` uses `include_str!` with `CARGO_MANIFEST_DIR` and `once_cell` to load `data/*.yaml`. `build.rs` triggers recompiles on data file changes. `utils/show.rs` handles logic for split `--show-*` flags, including listing available items when no argument is provided, and showing content for `--show-rules`.\n   - *Metrics*: `utils/metrics.rs` uses `byte-unit` for human-readable sizes.\n   - *Completions*: Use `clap_complete::generate` in `main.rs` for `--completions-fish-*` flags. Use `dirs::config_dir` to find the Fish completions directory for saving.\n   - *Clear Screen*: Use `clearscreen` crate in `main.rs` for `-cl`.\n"}],"tree":[{"name":".envrc","type":"file"},{"name":"CLI.org","type":"file"},{"name":"Cargo.toml","type":"file"},{"name":"Gemfile","type":"file"},{"name":"README.org","type":"file"},{"name":"Rakefile","type":"file"},{"name":"SPEC.org","type":"file"},{"name":"build.rs","type":"file"},{"name":"data","type":"directory","children":[{"name":"ai_readme_text.yaml","type":"file"},{"name":"prompts.yaml","type":"file"},{"name":"rules.yaml","type":"file"},{"name":"soft_ignores.yaml","type":"file"}]},{"name":"meta","type":"directory","children":[{"name":"ai-context.rb","type":"file"}]},{"name":"src","type":"directory","children":[{"name":"cli.rs","type":"file"},{"name":"config.rs","type":"file"},{"name":"context","type":"directory","children":[{"name":"gather.rs","type":"file"}]},{"name":"context.rs","type":"file"},{"name":"error.rs","type":"file"},{"name":"main.rs","type":"file"},{"name":"output","type":"directory","children":[{"name":"chunking.rs","type":"file"}]},{"name":"output.rs","type":"file"},{"name":"system_info.rs","type":"file"},{"name":"utils","type":"directory","children":[{"name":"config_utils.rs","type":"file"},{"name":"debug.rs","type":"file"},{"name":"metrics.rs","type":"file"},{"name":"quick.rs","type":"file"},{"name":"show.rs","type":"file"}]},{"name":"utils.rs","type":"file"}]}],"source":{"chunks":["xcontext_chunk_1.json","xcontext_chunk_2.json","xcontext_chunk_3.json","xcontext_chunk_4.json","xcontext_chunk_5.json","xcontext_chunk_6.json","xcontext_chunk_7.json","xcontext_chunk_8.json","xcontext_chunk_9.json","xcontext_chunk_10.json"]},"rules":{"general_coding":["- Write clear, concise, and maintainable code.","- Use meaningful variable and function names.","- Avoid magic numbers and strings.","- Keep functions and methods short and single-purpose.","- Follow project-specific style guides."],"instructions":["- Don't add comments in the code output, don't do it. NEVER NEVER NEVER.","- Always show full file content, not partial one","- You can add explantions and complex decisions and architecture patterns and anything you wanna tell in `AI.org` file","- Make sure to keep the README.org and SPEC.org files up to date","- For Rust CLI Options - Make sure to keep the CLI.org file up to date"],"rust_coding":["- Try to keep every file under 700 lines max.","- Follow Rust API guidelines.","- Use Rust OOP Pattern","- Write idiomatic Rust code (e.g., use iterators, pattern matching).","- Prefer standard library types over custom ones where applicable.","- Use `Result` for recoverable errors and `panic!` for unrecoverable ones.","- Keep functions small and focused.","- Apply the DRY (Don't Repeat Yourself) principle.","- Ensure proper error handling and propagation.","- Don't write tests; If you need to write some testing we can use ruby auruba for that purpose."]},"generation_timestamp":"2025-04-21T07:11:56.576427100Z"}